diff --git a/README.md b/README.md
index 1534fcf..f2315de 100644
--- a/README.md
+++ b/README.md
@@ -1,2 +1,18 @@
-# onf
-My onf scripts
+# onf/voltha
+
+vlan.py - A helper script used to generate vlan and dhcp configs for XGSPON testing.
+
+% vlan.py \
+  --device enp3s01d \
+  --workflow DT \
+  --comment 'onu SCOM000d01c7a' \
+  --cidr '10.11.111.254/24'
+
+# [ACT]: onu SCOM000d01c7a
+ip link add link enp3s01d name enp3s01d.11 type vlan id 11
+ip link set enp3s01d.11 up
+ip link add link enp3s01d.11 name enp3s01d.11.111 type vlan id 111
+ip link set enp3s01d.11.111 up
+ip addr add 10.11.111.254/24 dev enp3s01d.11.111
+# [FIN]: onu SCOM000d01c7a
+
diff --git a/voltha/makefile b/voltha/makefile
index 5e43ade..638389b 100644
--- a/voltha/makefile
+++ b/voltha/makefile
@@ -33,7 +33,7 @@ vlan-args += --cidr '10.44.444.254/24'
 #vlan-args += --subnet '33.333'
 #vlan-args += --subnet '44.444'
 
-vlan-args += --workflow DT
+# vlan-args += --workflow DT
 # vlan-args += --help
 try:
 	./vlan.py $(vlan-args)
diff --git a/voltha/vlan.py b/voltha/vlan.py
index d515380..f5c0efd 100755
--- a/voltha/vlan.py
+++ b/voltha/vlan.py
@@ -23,7 +23,7 @@ from vlan.workflow      import Utils           as wu_mod
 
 import vlan.network.VlanUtils                  as vu
 
-# from vlan.workspace     import loader => A, B, C
+## FIX THIS: On-demand loading (import loader => A, B, C)
 from vlan.workflow     import A               as workspace_A
 
 ## -----------------------------------------------------------------------
@@ -38,98 +38,6 @@ def init(debug=None):
 #        for name in ['foo', 'bar', 'tans']:
 #            Path(name).touch()
 
-## -----------------------------------------------------------------------
-## -----------------------------------------------------------------------
-def workflow_A(argv):
-    """Perform actions based on command line args.
-
-    :param argv: Command line args processed by python getopts
-    :type  argv: dict
-
-    :return: Success/failure set by action performed
-    :rtype : bool
-    """
-
-    argv = main_getopt.get_argv()
-
-    if not argv['device']:
-        raise Exception('--device= is required')
-    device = argv['device'][0]
-
-    obj = vu.VlanUtils()
-    ans = True
-    for cidr in argv['cidr']:
-        for line in [
-                #
-                '#',
-
-                # ip link add link ${device} name ${device}.11 type vlan id 11
-                obj.fmt_add_vlan_by_id(device, cidr),
-
-                # ip link set ${device} up
-                obj.fmt_vlan_device_up(device, cidr),
-
-                # ip link add link ${device}.11 name ${device}.11.111 type vlan id 111
-                obj.fmt_add_vlan2_by_id(device, cidr),
-
-                # ip link set ${device}.11.111 up 
-                obj.fmt_vlan2_device_up(device, cidr),
-
-                # ip addr add 10.11.111.254/24 dev ${device}.11.111
-                obj.fmt_add_netmask_by_vlan2(device, cidr),
-        ]:
-            print(line)
-
-    return ans
-
-## -----------------------------------------------------------------------
-##
-## -----------------------------------------------------------------------
-def workflow_C(argv):
-
-    argv = main_getopt.get_argv()
-
-    if not argv['device']:
-        raise Exception('--device= is required')
-
-    obj = vu.VlanUtils()
-
-    ans = True
-    for cidr in argv['cidr']:
-        fields   = obj.cidr_split(cidr)
-        octets   = fields['octets']
-        device   = argv['device'][0]
-        vlan_id  = octets[1]
-        device_X = "%s.%s" % (device, vlan_id)
-
-        workflow.Utils
-
-        
-        for line in [
-                #
-                '#',
-# ip link add link ${device} name ${device}.54 type vlan id 54
-                obj.fmt_B(device, device_X, vlan_id),
-
-# ip link set ${device}.54 up
-                obj.link_up_B(device_X),
-        ]:
-            print(line)
-
-    return ans
-
-## -----------------------------------------------------------------------
-## DT-PON17.conf
-## -----------------------------------------------------------------------
-def workflow_B(argv):
-
-    cidr   = argv['cidr'][0]
-    device = argv['device'][0]
-
-    args = argv['comment'][0]
-    conf = workspace_A.A(device, cidr, args)
-    print(''.join(conf))
-
 ## -----------------------------------------------------------------------
 ## -----------------------------------------------------------------------
 def digest_args():
@@ -178,7 +86,7 @@ def digest_args():
                 'comment' : argv['comment'][idx]
             }
 
-        # conf = workflow_B(device, cidr, argv)
+        ## TODO: Dynamic objects based on --workflow XYZ
         obj = workspace_A.A(device, cidr, foo)
         conf = obj.gen_conf()
         print(''.join(conf))
@@ -198,15 +106,12 @@ def main(argv_raw):
     init()
     main_getopt.getopts(argv_raw)
     digest_args()
-
-    # cleanup
     sys.exit(0)
 
 ##----------------##
 ##---]  MAIN  [---##
 ##----------------##
 if __name__ == "__main__":
-
     main(sys.argv[1:]) # NOSONAR
 
 # [EOF]
diff --git a/voltha/vlan/network/DhcpUtils.py b/voltha/vlan/network/DhcpUtils.py
index b185a4e..9f2a104 100644
--- a/voltha/vlan/network/DhcpUtils.py
+++ b/voltha/vlan/network/DhcpUtils.py
@@ -36,7 +36,7 @@ class DhcpUtils:
     def gen(self, cidr) -> str:
 
         #subnet 10.11.1.0 netmask 255.255.255.0 {
-        # range 10.11.1.1 10.11.1.100;
+        # range 10.11.1.1 10.11.1.100;   # Enable full range, not limited to 100
         # option routers 10.11.1.254;
         # option domain-name-servers 8.8.8.8 ;
         # }
diff --git a/voltha/vlan/network/VlanUtils.py b/voltha/vlan/network/VlanUtils.py
index 21c9d46..af36280 100644
--- a/voltha/vlan/network/VlanUtils.py
+++ b/voltha/vlan/network/VlanUtils.py
@@ -1,5 +1,5 @@
-# -*- python -*-
-""" . """
+ # -*- python -*-
+"""This module is used to derive network configs from CIDR(s)"""
 
 ##-------------------##
 ##---]  GLOBALS  [---##
@@ -17,7 +17,7 @@ import re
 from vlan.main   import utils as main_utils
 
 class VlanUtils:
-    'Common base class for all employees'
+    """This module is used to derive network configs from CIDR(s)"""
 
     error  = None
     errors = []
@@ -26,8 +26,11 @@ class VlanUtils:
     ## -----------------------------------------------------------------------
     def __init__(self, args=None):
         """Constructor.
-        :param args: 
+
+        :param args: Arguments used to initialize object attributes.
+        :type  args: dict, optional
         """
+
         if args is None:
             args = {}
 
@@ -49,8 +52,11 @@ class VlanUtils:
         
         :return: Fields extractd from cidr string.
         :rtype : dict
+            addr   - IP address as a string
+            mask   - network mask
+            octets - IP address split into a list of octets
         """
-        
+
         address,mask = ipaddress\
             ._IPAddressBase\
             ._split_addr_prefix(cidr)
@@ -62,163 +68,28 @@ class VlanUtils:
                 'mask'   : mask,
             }
         return ans
-        
-    ## -----------------------------------------------------------------------
-    ## -----------------------------------------------------------------------
-    def fmt_add_vlan_by_id(self, device, name, vlan_id):
-
-        # line = "ip link add link %s name %s.%s type vlan id %s" % (device, vlan)
-        line = ' '.join([
-            "ip link add link %s" % (device),
-            "name %s.%s"          % (name),
-            "type vlan id %s"     % (vlan_id),
-        ])
-
-        return line
-
-    ## -----------------------------------------------------------------------
-    ## -----------------------------------------------------------------------
-    def fmt_add_vlan_by_id(self, device, cidr):
-        fields = self.cidr_split(cidr)
-
-        octets = fields['octets']
-        vlan_X  = octets[1]
-        vlan_XY = "%s.%s"  % (octets[1], octets[2])
-        vlan_sub = "%s.%s" % (device, vlan_XY)
-
-        # line = "ip link add link %s name %s.%s type vlan id %s" % (device, vlan)
-        line = ' '.join([
-            "ip link add link %s" % (device),
-            "name %s.%s"          % (device, octets[1]),
-            "type vlan id %s"     % (vlan_X),
-        ])
-
-        name = "%s.%s" % (device, octets[1])
-        return self.fmt_add_vlan_by_id(device, name, vlan_id)
-        # return line
-
-    ## -----------------------------------------------------------------------
-    ## -----------------------------------------------------------------------
-    def fmt_add_vlan_by_id_orig(self, device, cidr):
-        fields = self.cidr_split(cidr)
-
-        octets = fields['octets']
-        vlan_X  = octets[1]
-        vlan_XY = "%s.%s"  % (octets[1], octets[2])
-        vlan_sub = "%s.%s" % (device, vlan_XY)
-
-        # line = "ip link add link %s name %s.%s type vlan id %s" % (device, vlan)
-        line = ' '.join([
-            "ip link add link %s" % (device),
-            "name %s.%s"          % (device, octets[1]),
-            "type vlan id %s"     % (vlan_X),
-        ])
-
-        return line
-
-    ## -----------------------------------------------------------------------
-    ## -----------------------------------------------------------------------
-    def fmt_add_vlan_by_id(self, device, cidr):
-        fields = self.cidr_split(cidr)
-
-        octets = fields['octets']
-        vlan_X  = octets[1]
-        vlan_XY = "%s.%s"  % (octets[1], octets[2])
-        vlan_sub = "%s.%s" % (device, vlan_XY)
-
-        # line = "ip link add link %s name %s.%s type vlan id %s" % (device, vlan)
-        line = ' '.join([
-            "ip link add link %s" % (device),
-            "name %s.%s"          % (device, octets[1]),
-            "type vlan id %s"     % (vlan_X),
-        ])
-
-        name = "%s.%s" % (device, octets[1])
-        return self.fmt_add_vlan_by_id(device, name, vlan_id)
-        # return line
-
-    ## -----------------------------------------------------------------------
-    ## -----------------------------------------------------------------------
-    def fmt_vlan_device_up(self, device, cidr):
-        fields   = self.cidr_split(cidr)
-        device_X = "%s.%s" % (device, fields['octets'][1])
-
-        line = 'ip link set %s up' % (device_X)
-        return line
-  
-    ## -----------------------------------------------------------------------
-    ## -----------------------------------------------------------------------
-    def link_up_B(self, device_id):
-        line = 'ip link set %s up' % (device_id)
-        return line
-  
-    ## -----------------------------------------------------------------------
-    ## -----------------------------------------------------------------------
-    def fmt_add_vlan2_by_id(self, device, cidr):
-        fields = self.cidr_split(cidr)
-
-        octets = fields['octets']
-        vlan_X  = "%s.%s"  % (device, octets[1])
-        vlan_XY = "%s.%s"  % (vlan_X, octets[2])
-        vlan_sub = "%s.%s" % (device, vlan_XY)
-
-        # line = "ip link add link %s name %s.%s type vlan id %s" % (device, vlan)
-        line = ' '.join([
-            "ip link add link %s" % (vlan_X),
-            "name %s"             % (vlan_XY),
-            "type vlan id %s"     % octets[2],
-        ])
-
-        return line
-
-    ## -----------------------------------------------------------------------
-    ## -----------------------------------------------------------------------
-    def fmt_vlan2_device_up(self, device, cidr):
-        fields    = self.cidr_split(cidr)
-        octets    = fields['octets']
-        device_XY = "%s.%s.%s" % (device, octets[1], octets[2])
-
-        line = 'ip link set %s up' % (device_XY)
-        return line
 
     ## -----------------------------------------------------------------------
     ## -----------------------------------------------------------------------
-    def fmt_add_netmask_by_vlan2(self, device, cidr):
-        fields = self.cidr_split(cidr)
-
-        octets    = fields['octets']
-        vlan_X    = "%s.%s"  % (device, octets[1])
-        device_XY = "%s.%s"  % (vlan_X, octets[2])
-
-        # ip addr add 10.11.111.254/24 dev ${device}.11.111
-        line = ' '.join([
-            "ip addr add %s" % (cidr),
-            "dev %s"         % (device_XY),
-        ])
-
-        return line
+    def is_valid_cidr(self, cidr) -> bool:
+        """Validate --cidr command line argument value.
 
-    ## -----------------------------------------------------------------------
-    ## -----------------------------------------------------------------------
-    def fmt_B(self, cidr, vlan_id):
-        fields = self.cidr_split(cidr)
+        :param cidr: 
+        :type  cidr: str
 
-        octets    = fields['octets']
-        vlan_X    = "%s.%s"  % (device, octets[1])
-        device_XY = "%s.%s"  % (vlan_X, octets[2])
+        :return: True if string resembles a valid CIDR.
+        :rtype : bool
 
-        # ip addr add 10.11.111.254/24 dev ${device}.11.111
-        line = ' '.join([
-            "ip addr add %s" % (cidr),
-            "dev %s"         % (vlan_id),
-        ])
+        NOTE: Values accepted may not represent a valid network address.
 
-        return line
-    
-    ## -----------------------------------------------------------------------
-    ## -----------------------------------------------------------------------
-    def is_valid_cidr(self, cidr) -> bool:
-        """ . """
+          VLAN ID is passed as a CIDR value (invalid octet: x>=256)
+          ---------------------------------------------------------
+          VLAN 0,4095    - Reserved VLANs
+          VLAN 1         - Default switch VLAN (RO)
+          VLAN 2-1001    - User defined VLANs.
+          VLAN 1002-1005 - CISCO defaults for fddi and token ring.
+          VLAN 1006-4094 - Extended VLAN range.
+        """
 
         ans = False
         buffer = []
@@ -226,22 +97,53 @@ class VlanUtils:
         try:
             ipaddress.IPv4Network(cidr, strict=False)
             ans = True
+
         except ipaddress.AddressValueError as err:
-            # ipaddress.AddressValueError: Octet 333 (> 255) not permitted in '10.33.333.254'
+            # Octet 333 (> 255) not permitted in '10.33.333.254'
             pattern = """Octet \d+ \(.+\) not permitted in '\d+(\.\d+){3}'"""
             if not re.search(pattern, str(err)):
                 buffer = ['Detected invalid address %s: %s' % (cidr, err)]
+            # elif octet >= 4096:
+
         except ipaddress.NetmaskValueError as err:            
             # ipaddress.NetmaskValueError: '255' is not a valid netmask
             buffer = ['Detected invalid netmask %s: %s' % (cidr, err)];
+
         except ValueError as err:
             print(" ** err: %s" % err)
+
         except Exception as err:
             buffer = ['Detected invalid argument %s: %s' % (cidr, err)]
 
         setattr(self, 'errors', buffer)
         return ans
     
+    ## -----------------------------------------------------------------------
+    ## -----------------------------------------------------------------------
+    def is_valid_octets(self, cidr) -> bool:
+        """Determine if CIDR octet fields are valid.
+
+        :param cidr: cidr string to validate
+        :type  cidr: str
+
+        :return: Status based on detection.
+        :rytpe: bool
+        """
+
+        buffer = []
+        parsed = self.cidr_split(cidr)
+        for octet in parsed['octets']:
+            if not octet.isdigit():
+                buffer = ['Detected non-numeric octet: %s' % octet]
+            elif int(octet) > 4095:
+                buffer = ['Detected invalid vlan id (%s>4095): %s' % octet]
+            elif int(octet) < 0:
+                buffer = ['Detected invalid octet: %s' % octet]
+
+        setattr(self, 'errors', buffer)
+        ans = len(buffer) == 0
+        return ans
+
     ## -----------------------------------------------------------------------
     ## -----------------------------------------------------------------------
     def is_valid_syntax(self, cidr) -> bool:
@@ -252,17 +154,18 @@ class VlanUtils:
 
         :return: Status based on detection.
         :rytpe: bool
+
+        NOTE: Detection will preserve basic structure of the cidr argument
+          but will replace values with a known valid octet.
         """
 
         valid_octet   = '255'
-
-        # netmask == ipaddress._max_prefixlen()
-        # ipaddress.NetmaskValueError: '255' is not a valid netmask        
-        valid_netmask = '32' # '255' 
+        valid_netmask = '32'
         
         parsed    = self.cidr_split(cidr)
         faux_ip   = '.'.join([valid_octet for octet in parsed['octets']])
         faux_cidr = "%s/%s" % (faux_ip, valid_netmask)
+
         return self.is_valid_cidr(faux_cidr)
 
     ## -----------------------------------------------------------------------
@@ -278,6 +181,12 @@ class VlanUtils:
         if not self.is_valid_syntax(arg):
             errs = ['Detected invalid cidr=%s' % arg]
 
+        elif not self.is_valid_octets(arg):
+            errs = getattr(self, 'errors')
+
+        elif not self.is_valid_octets(arg):
+            errs = getattr(self, 'errors')
+
         elif not self.is_valid_cidr(arg):
             errs = getattr(self, 'errors') # set by is_valid
 
@@ -297,10 +206,14 @@ class VlanUtils:
                 
         setattr(self, 'error', msg)
         return len(msg) == 0
- 
-# [EOF]
 
-            # network = ipaddress.IPv4Network((ip_200, mask), strict=False)
-            # print(network)
+# [SEE ALSO]
+# -----------------------------------------------------------------------
+# ..seealso: https://www.geeksforgeeks.org/virtual-lan-vlan/
+# ..seealso: https://python-iptools.readthedocs.io/en/latest/
+# -----------------------------------------------------------------------
+# network = ipaddress.IPv4Network((ip_200, mask), strict=False)
+# print(network)
+# -----------------------------------------------------------------------
 
-        # https://python-iptools.readthedocs.io/en/latest/
+# [EOF]
diff --git a/voltha/vlan/workflow/A.py b/voltha/vlan/workflow/A.py
index 64bf6f9..295eed4 100644
--- a/voltha/vlan/workflow/A.py
+++ b/voltha/vlan/workflow/A.py
@@ -19,7 +19,6 @@ from vlan.main   import utils as main_utils
 import vlan.network.VlanUtils                  as vu_mod
 from vlan.workflow      import Utils           as wu_mod
 
-
 class A:
     """This module is used to generate workspace A vlan configs."""
 
@@ -54,6 +53,9 @@ class A:
 
         :return: Workflow A config values.
         :rtype : list
+
+        Format args into a dictionary.
+        Invoke Template() to produce a string from template + values.
         """
 
         device = self.device
diff --git a/voltha/vlan/workflow/Utils.py b/voltha/vlan/workflow/Utils.py
index c00e0f6..54fbf05 100644
--- a/voltha/vlan/workflow/Utils.py
+++ b/voltha/vlan/workflow/Utils.py
@@ -15,7 +15,6 @@ import pprint
 from pathlib     import Path
 from string      import Template
 
-
 class Utils:
     """A module for populating vlan templates."""
 
